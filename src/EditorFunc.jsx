import React, { Fragment, useState, useEffect } from "react"
import EmailEditor from "react-email-editor"
import { Button, Nav, Section, Input, Container } from "./App.style"
import ShortId from "shortid" //Using this Package for AutoGeneratedID

// Adding sample data for new template load
import sample from "./sample.json"

const EditorFunc = props => {
  // Creating manual reference here because of function component
  let editorRef = React.createRef()

  //Setting empty template ID
  const [templateID, setTemplateID] = useState("")
  const [oldID, setOldID] = useState(props.match.id || null)

  let typeTemplate =
    props.location.pathname.split("/")[1] === "edit" ? "update" : "save"

  const [isLoaded, setIsLoaded] = useState(false)
  const [isSave, setIsSave] = useState(false)
  const [isNameChange, setIsNameChange] = useState(false)

  useEffect(() => {
    if (isLoaded) {
      // Setting template ID here after loading design data
      let templateID = props.match.params.id || ShortId.generate()
      setTemplateID(templateID)

      // Initializing the default sample data if new
      let data = sample

      // Parsing the templateID if edit
      let design = JSON.parse(localStorage.getItem(templateID))

      // Replacing the data with design if edit
      if (design) {
        data = design
      }

      editorRef.current.loadDesign(data)

      /**
       * Resetting the value to false for next load
       * if component is umounted
       */
      setIsLoaded(false)
    }
  }, [isLoaded])

  const handleLoadClick = () => {
    setIsLoaded(true)
  }

  useEffect(() => {
    if (isSave) {
      editorRef.current.saveDesign(data => {
        // Saving data into localstorage
        localStorage.setItem(templateID, JSON.stringify(data))
        // Redirecitng to listing page
        props.history.push("/")
      })

      /**
       * Resetting the value to false for next load
       * if component is umounted
       */
      setIsSave(false)
    }
  }, [isSave])

  const handleSaveClick = name => {
    setIsSave(true)
  }

  useEffect(() => {
    if (isNameChange) {
      // removing old template from localstorage
      localStorage.removeItem(oldID)

      // Saving the design to localstorage
      editorRef.current.saveDesign(data => {
        // Saving data into localstorage
        localStorage.setItem(templateID, JSON.stringify(data))
      })

      /**
       * Resetting the value to false for next load
       * if component is umounted
       */
      setIsNameChange(false)
    }
  }, [isNameChange])

  const handleNameChange = name => {
    if (name.length > 0) {
      setTemplateID(name)
      setOldID(templateID)
      setIsNameChange(true)
    }
  }

  return (
    <Fragment>
      <Nav transparent>
        <Container>
          <Input
            debounceTimeout={300}
            value={templateID}
            minLength={1}
            type="text"
            required
            onChange={event => handleNameChange(event.target.value)}
          />
        </Container>

        <Button to="#" onClick={handleSaveClick}>
          {typeTemplate} Template
        </Button>
      </Nav>
      <Section>
        <EmailEditor ref={editorRef} onLoad={handleLoadClick} />
      </Section>
    </Fragment>
  )
}

export default EditorFunc
